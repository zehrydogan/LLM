# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OkpIxO3os1Mw6gZhBiahOhIy7oKJG32v
"""

import os
import torch
from PIL import Image
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader
from transformers import ViTForImageClassification
# Data loading and preprocessing
def load_data(data_dir):
    data = []
    class_to_idx = {class_name: i for i, class_name in enumerate(os.listdir(data_dir))}
    for class_name in os.listdir(data_dir):
        class_path = os.path.join(data_dir, class_name)
        for image_path in os.listdir(class_path):
            # Load image and apply transformations
            image = Image.open(os.path.join(class_path, image_path)).convert('RGB')
            transform = transforms.Compose([
                transforms.Resize((224, 224)),
                transforms.ToTensor(),
            ])
            image = transform(image)
            data.append((image, class_to_idx[class_name]))
    return data
class CustomDataset(Dataset):
    def __init__(self, data):
        self.data = data
    def __len__(self):
        return len(self.data)
    def __getitem__(self, idx):
        image, label = self.data[idx]
        return image, label
# Loading data and creating a custom dataset
train_data = load_data("Data_test")
train_dataset = CustomDataset(train_data)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
# Model creation
model = ViTForImageClassification.from_pretrained("google/vit-base-patch16-224")
# Defining optimization and loss functions
optimizer = torch.optim.Adam(model.parameters(), lr=2e-5)
criterion = torch.nn.CrossEntropyLoss()
# Setting training parameters
num_epochs = 3
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
# Training loop
for epoch in range(num_epochs):
    model.train()
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        # Forward, backward, and optimization steps
        outputs = model(images)
        loss = criterion(outputs.logits, labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')